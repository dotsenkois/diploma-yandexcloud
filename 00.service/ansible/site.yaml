---
- name: Install and Configure remote service vm
  hosts: all
  pre_tasks:
    - name: Instale packages list
      become: true
      ansible.builtin.apt:
        pkg:
          - git
          - docker-compose
          - htop
          - docker.io
          - python3-pip
          - net-tools
          - unzip
          - zip
          - apt-transport-https
          - postgresql-client-common
          - jq
          - jsonnet
        update_cache: true

    - name: Instale ansible
      ansible.builtin.pip:
        name:
          - ansible

    - name: Check that terraform exists
      ansible.builtin.stat:
        path: /usr/bin/terraform
      register: terrafrom_exists

    - name: Dowload terraform.zip
      ansible.builtin.get_url:
        url: https://storage.yandexcloud.net/bucket-sa-distrib1/terraform_1.3.3_linux_amd64.zip
        dest: /tmp/terraform.zip
        mode: '0640'
      when: not terrafrom_exists.stat.exists

    - name: Unarchive a terraform
      become: true
      ansible.builtin.unarchive:
        src: /tmp/terraform.zip
        dest: /usr/bin
        remote_src: true
      when: not terrafrom_exists.stat.exists


    - name: Check that diploma-yandexcloud exists
      ansible.builtin.stat:
        path: ~/repo/diploma-yandexcloud
      register: diploma_yandexcloud_exists

    - name: Git clone diploma-yandexcloud
      ansible.builtin.git:
        repo: git@github.com:dotsenkois/diploma-yandexcloud.git
        dest: ~/repo/diploma-yandexcloud
        version: latest
      register: diploma_yandexcloud
      changed_when: "'Cloning into' in diploma_yandexcloud.stdout"
      when: not diploma_yandexcloud_exists.stat.exists

    - name: Check that diploma-web-app exists
      ansible.builtin.stat:
        path: ~/repo/diploma-web-app
      register: diploma_web_app_exists

    - name: Git clone diploma-web-app
      ansible.builtin.git:
        repo: git@github.com:dotsenkois/diploma-web-app.git
        dest: ~/repo/diploma-web-app
        version: latest
        key_file: ~/.ssh/netology
        accept_hostkey: true
      register: diploma_web_app
      changed_when: "'Cloning into' in diploma_web_app.stdout"
      when: not diploma_web_app_exists.stat.exists

    - name: Install helm
      ansible.builtin.shell:
        cmd: "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash"
      register: helm
      changed_when: helm.rc != 0

# qbec instalation
    - name: Dowload qbec-linux-amd64.tar.gz
      ansible.builtin.get_url:
        url: https://github.com/splunk/qbec/releases/download/v0.15.2/qbec-linux-amd64.tar.gz
        dest: /tmp/qbec-linux-amd64.tar.gz
        mode: '0640'

    - name: Unarchive a qbec-linux-amd64
      become: true
      ansible.builtin.unarchive:
        src: /tmp//tmp/qbec-linux-amd64.tar.gz
        dest: /usr/local/bin
        remote_src: true
    - name: Qbec completion
      ansible.builtin.shell:
        cmd: "qbec completion | sudo tee /etc/bash_completion.d/qbec"
      register: qbec_is_installed
      changed_when: qbec_is_installed.rc != 0


  tasks:
    - name: Copy private key to remote hosts
      ansible.builtin.copy:
        src: "~/.ssh/netology"
        dest: "~/.ssh/netology"
        mode: "600"
    - name: Copy public key to remote hosts
      ansible.builtin.copy:
        src: "~/.ssh/netology.pub"
        dest: "~/.ssh/netology.pub"
        mode: "600"

    - name: Echo YC_TOKEN
      ansible.builtin.shell:
        cmd: "echo $YC_TOKEN"
      register: YC_TOKEN
      changed_when: YC_TOKEN.rc != 0
      delegate_to: localhost

    - name: Echo YC_CLOUD_ID
      ansible.builtin.shell:
        cmd: "echo $YC_CLOUD_ID"
      register: YC_CLOUD_ID
      changed_when: YC_CLOUD_ID.rc != 0
      delegate_to: localhost

    - name: Set env YC_CLOUD_ID for YC
      ansible.builtin.shell:
        cmd: echo "export YC_CLOUD_ID={{ YC_CLOUD_ID.stdout }}" >> ~/.bashrc && cat ~/.bashrc | grep YC_CLOUD_ID
      environment:
        YC_CLOUD_ID: "{{ YC_CLOUD_ID.stdout }}"
      register: bashrc_YC_CLOUD_ID_added
      changed_when: "YC_CLOUD_ID.stdout in bashrc_YC_CLOUD_ID_added.stdout"

    - name: Set env YC_TOKEN for YC
      ansible.builtin.shell:
        cmd: echo "export YC_TOKEN={{ YC_TOKEN.stdout }}" >> ~/.bashrc && cat ~/.bashrc | grep YC_TOKEN
      environment:
        YC_TOKEN: "{{ YC_TOKEN.stdout }}"
      register: bashrc_YC_TOKEN_added
      changed_when: "YC_TOKEN.stdout in bashrc_YC_TOKEN_added.stdout"

    - name: Check that kubectl avaliable
      ansible.builtin.stat:
        path: /usr/bin/kubectl
        register: kubectl_result

    - name: Dowload kubectl
      ansible.builtin.shell:
        cmd: curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && chmod +x kubectl && mv kubectl /usr/bin/kubectl
        when: not kubectl_result.stat.exists
