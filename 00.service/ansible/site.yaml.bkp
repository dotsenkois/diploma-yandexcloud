---
- name: Install and Configure remote service vm
  hosts: all
  pre_tasks:
    # - name: Instale packages list
    #   become: true
    #   ansible.builtin.apt:
    #     pkg:
    #       - git
    #       - docker-compose
    #       - docker.io
    #       - postgresql-client
    #       - python3-pip
    #       # - golang-go
    #     update_cache: true
    # # - name: Instale ansible
    #   become: true
    #   ansible.builtin.command:
    #     cmd: "apt update && apt upgrade -y"
          # - terraform-installer    
    # - name: Instale ansible
    #   ansible.builtin.pip:
    #     name:
    #       - ansible
    #       # - terraform-installer
    # - name: Download golang
    #   ansible.builtin.get_url:
    #     url: "https://go.dev/dl/go1.19.2.linux-amd64.tar.gz"
    #     dest: /tmp/go1.19.2.linux-amd64.tar.gz
    #     mode: "644"
    # - name: Untar golang
    #   become: true
    #   ansible.builtin.unarchive:
    #     src: /tmp/go1.19.2.linux-amd64.tar.gz
    #     dest: /usr/local/
    #     remote_src: true
    # - name: G
    #   shell: "echo $MY_ENV_VARIABLE"
    #   environment:
    #     MY_ENV_VARIABLE: ansiblevar.$PATH:
    #     MY_ENV_VARIABLE: whatever_value
    #     MY_ENV_VARIABLE: whatever_value

    # - name: Download helm
    #   ansible.builtin.get_url:
    #     url: "https://get.helm.sh/helm-v3.10.1-linux-amd64.tar.gz"
    #     dest: /tmp/helm-v3.10.1-linux-amd64.tar.gz
    #     mode: "644"
    # - name: Untar helm
    #   become: true
    #   ansible.builtin.unarchive:
    #     src: /tmp/helm-v3.10.1-linux-amd64.tar.gz
    #     dest: /usr/local/bin/
    #     remote_src: true
    # # - name: Create project directory terraform
    # #   ansible.builtin.file:
    # #     state: directory
    # #     path: './terraform'
    # #     mode: "777"
    # # - name: Download terraform
    # #   ansible.builtin.git:
    # #     repo: https://github.com/hashicorp/terraform.git
    # #     clone: true
    # #     version: f5de1099ff0e6a2cfd99716334c89558a481792c
    #     dest: ./terraform/
  tasks: []
    # - name: Install same version of PostgreSQL
    #   become: true
    #   ansible.builtin.apt:
    #     pkg:
    #       - postgresql-{{ pg_ver }}
    #       - postgresql-contrib
  handlers: []
    # - name: Restart postgresql
    #   become: true
    #   ansible.builtin.service:
    #     name: postgresql
    #     state: restarted

# - name: Setup security senntings
#   hosts: db-master-001
#   handlers:
#     - name: Restart postgresql
#       become: true
#       ansible.builtin.service:
#         name: postgresql
#         state: restarted
#   tasks:
#     - name: Update apt packages
#       become: true
#       ansible.builtin.apt:
#         update_cache: true
#     - name: Install postgresql
#       become: true
#       ansible.builtin.apt:
#         pkg:
#           - postgresql-12
#           - postgresql-contrib
#           - postgresql-client
#     - name: Copy PG configs
#       become: true
#       ansible.builtin.copy:
#         src: "{{ item }}"
#         dest: /etc/postgresql/12/main/conf.d/
#         force: true
#         mode: "664"
#       with_fileglob:
#         - ../templates/pg/*
#     - name: Init DB
#       become: true
#       ansible.builtin.command:
#         cmd: "--login --user=postgres psql < /etc/postgresql/12/main/conf.d/init.sql"
#       register: fist_run
#       changed_when: fist_run.rc != 0

# # Create the file repository configuration:
# sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'

# # Import the repository signing key:
# wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

# # Update the package lists:
# sudo apt-get update

# # Install the latest version of PostgreSQL.
# # If you want a specific version, use 'postgresql-12' or similar instead of 'postgresql':
# sudo apt-get -y install postgresql
